#include "pch.h"

TEST(Case1, Test1) {
	char* str = new char[80]{ '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1' };
	int s = 0, e = 81;
	shortest_group(str, s, e);

  EXPECT_EQ(e-s-1,80);
}

TEST(Case2, Test1) {
	char* str = new char[80]{ '1','1', '1', '1', ' ', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1' };
	int s = 0, e = 81;
	shortest_group(str, s, e);

	EXPECT_EQ(e - s - 1, 4);
}

TEST(Case3, Test1) {
	char* str = new char[80]{ '1',' ', '1', '1', ' ', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1' };
	int s = 0, e = 81;
	shortest_group(str, s, e);

	EXPECT_EQ(e - s - 1, 1);
}

TEST(Case4, Test1) {
	char* str = new char[80]{ '1',' ', '1', ' ', ' ', '1', ' ', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1', '1', '1'};
	int s = 0, e = 81;
	shortest_group(str, s, e);

	EXPECT_EQ(e - s - 1, 1);
}

TEST(Case5, Test1) {
	char* str = new char[10]{ '1','0','1', ' ', '1', ' ', '0', '1', '0', '1' };
	int s = 0, e = 11;
	shortest_group(str, s, e);

	EXPECT_EQ(e - s - 1, 1);
}